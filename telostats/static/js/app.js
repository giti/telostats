// Generated by CoffeeScript 1.3.3
(function() {
  var initMap, pushStateNav, stationsLayer;

  stationsLayer = function(opts) {
    var animationDelayTime, draw, drawStations, fadeInTime, layer, map, project, registerMapMouseDragHandlers, s, stationAnimation, stationAnimationWait, stationColor, stationCoords, stationData, stationDotSize, stations, svg;
    map = opts.map;
    stationData = opts.stations;
    stationCoords = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = stationData.length; _i < _len; _i++) {
        s = stationData[_i];
        _results.push([s.longitude, s.latitude]);
      }
      return _results;
    })();
    svg = d3.select(document.body).append('svg').attr('id', 'd3svg');
    stations = svg.append('g').attr('id', 'stations');
    fadeInTime = 500;
    animationDelayTime = 600;
    stationColor = function(station) {
      var bikes;
      bikes = station.poles - station.available;
      if (bikes === 0) {
        return 0;
      } else if (bikes <= 5) {
        return 1;
      } else if (station.available <= 5) {
        return 3;
      } else if (station.available === 0) {
        return 4;
      } else {
        return 2;
      }
    };
    stationDotSize = d3.scale.quantize().domain([opts.minZoom, opts.maxZoom]).range([2, 3, 4]);
    stationAnimation = d3.scale.linear().domain(d3.extent(stationCoords, function(coord) {
      return coord[1];
    })).range([0, fadeInTime]);
    project = function(location) {
      var point;
      point = map.locationPoint({
        lat: location[1],
        lon: location[0]
      });
      return [point.x, point.y];
    };
    stationAnimationWait = function(index) {
      return stationAnimation(stationData[index].latitude);
    };
    registerMapMouseDragHandlers = function(elem) {
      var clientX, clientY;
      clientX = null;
      clientY = null;
      $(elem).on('mousedown', function(event) {
        clientX = event.clientX;
        return clientY = event.clientY;
      });
      return $(elem).on('mouseup', function(event) {
        var container, stationary;
        stationary = clientX === event.clientX && clientY === event.clientY;
        if (stationary) {
          $('.station').attr('data-state', 'visible');
          $('#stationflyout').attr('data-state', 'hidden');
          container = $('#stationflyout');
          opts = {
            url: '/station/' + $(this).attr('data-id'),
            container: container
          };
          $.pjax(opts);
          $(this).attr('data-state', 'selected');
          return container.on('pjax:end', function() {
            return $('#stationflyout').attr('data-state', 'visible');
          });
        }
      });
    };
    drawStations = function() {
      var cellGroups, cellsEnter, dots, dotsEnter, groupsEnter, stationDelay;
      stationDelay = function(d, i) {
        return animationDelayTime + fadeInTime - stationAnimationWait(i);
      };
      cellGroups = stations.selectAll('g').data(stationData);
      groupsEnter = cellGroups.enter().append('g');
      cellsEnter = groupsEnter.append('path');
      dotsEnter = groupsEnter.append('circle');
      dots = stations.selectAll('g>circle').data(stationData);
      dots.attr('r', stationDotSize(map.zoom())).attr('transform', function(d) {
        return 'translate(' + project([d.longitude, d.latitude]) + ')';
      });
      groupsEnter.classed('station', true).attr('data-id', function(d, i) {
        return stationData[i].id;
      }).attr('data-bucket', function(d, i) {
        return stationColor(stationData[i]);
      }).attr('data-state', 'loading').transition().delay(stationDelay).duration(1000).attr('data-state', 'visible').each('end', function() {
        return registerMapMouseDragHandlers(this);
      });
      cellsEnter.classed('station_cell', true);
      dotsEnter.classed("station_dot", true).attr('opacity', 0.0).attr('r', 0).attr('transform', function(d) {
        return 'translate(' + project([d.longitude, d.latitude]) + ')';
      }).transition().delay(150).duration(450).attr('opacity', 0.15).attr('r', 8 * stationDotSize(map.zoom())).transition().delay(function(d, i) {
        return animationDelayTime + fadeInTime - stationAnimationWait(i);
      }).duration(200).attr('r', stationDotSize(map.zoom())).attr('opacity', 1);
      return stations.selectAll('g>path').data(stationData).attr('d', function(d, i) {
        var p, poly, projected;
        poly = d3.geom.polygon(stationData[i].polygon);
        projected = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = poly.length; _i < _len; _i++) {
            p = poly[_i];
            _results.push(project(p));
          }
          return _results;
        })();
        return 'M' + projected.join('L') + 'Z';
      });
    };
    draw = function() {
      svg.attr('width', $('#map').width()).attr('height', $('#map').height());
      return drawStations();
    };
    layer = {
      'project': project,
      'draw': draw,
      'parent': svg.node()
    };
    return layer;
  };

  initMap = function() {
    var m, mapbounds, maxZoom, minZoom, telostats_tiles;
    m = mapbox.map('map');
    telostats_tiles = {
      'tilejson': '2.0.0',
      'tiles': [TILESERVER_URL]
    };
    minZoom = 13;
    maxZoom = 17;
    m.addLayer(mapbox.layer().tilejson(telostats_tiles));
    m.ui.zoomer.add();
    mapbounds = new MM.Extent(32.149, 34.742, 32.026, 34.924);
    m.setExtent(mapbounds);
    m.setPanLimits(mapbounds);
    m.setZoomRange(minZoom, maxZoom);
    return d3.json('/api/v1/station/', function(stations) {
      var opts, sl;
      opts = {
        'map': m,
        'stations': stations.objects,
        'minZoom': minZoom,
        'maxZoom': maxZoom
      };
      sl = stationsLayer(opts);
      return m.addLayer(sl);
    });
  };

  pushStateNav = function(url) {
    window.history.pushState(null, '', url);
    if (typeof _gaq !== "undefined" && _gaq !== null) {
      return _gaq.push(['_trackPageview', url]);
    }
  };

  $(function() {
    initMap();
    $(document).pjax('a[data-pjax]');
    $('.close-flyout').live('click', function(e) {
      $(this).parent().attr('data-state', 'hidden');
      $('.station[data-state=selected]').attr('data-state', 'visible');
      pushStateNav($(this).attr('href'));
      return false;
    });
    return $('a.static-flyout').click(function() {
      var target;
      target = $(this).attr('data-flyout');
      $(target).attr('data-state', 'visible');
      pushStateNav($(this).attr('href'));
      return false;
    });
  });

}).call(this);
